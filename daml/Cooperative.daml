{-# LANGUAGE ApplicativeDo #-}
module Cooperative where

import Inventory

type VendorInvitedId = ContractId VendorInvite
type StallPermitCid = ContractId StallPermit
type CoopCid = ContractId Cooperative

template Cooperative
  with
    coop    : Party
    vendors : [Party]
    offers  : [ContractId Offer]
  where
    signatory coop
    controller coop can
      nonconsuming InviteVendor : (CoopCid, VendorInvitedId)
        with
           vendor : Party
        do
           coopId <- create this with vendors = vendor :: vendors
           archive self
           invite <- create VendorInvite with ..
           return (coopId, invite)

template VendorInvite
  with
    coop : Party
    vendor : Party
  where
    signatory coop

    controller vendor can
       AcceptInvitation : StallPermitCid
         do
           create StallPermit with ..

template StallPermit
   with
     coop : Party
     vendor : Party
   where
     signatory vendor
     controller vendor can
        nonconsuming ForSale : (ContractId Stall,ContractId Offer)
          with
            inventoryCid : ContractId Inventory
          do
            inventory <- fetch inventoryCid
            offer <- create Offer with inventory = inventoryCid, vendor
            stallWithOffer <- create Stall with owner = vendor, regulator = coop, buyers = [],offers = [offer]
            return (stallWithOffer, offer)
