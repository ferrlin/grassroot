{-# LANGUAGE ApplicativeDo #-}
module Cooperative where

import Inventory

type VendorInvitedId = ContractId VendorInvite
type StallPermitCid = ContractId StallPermit
type CoopCid = ContractId Cooperative

template Cooperative
  with
    coop    : Party
    vendors : [Party]
    offers  : [ContractId Offer]
  where
    signatory coop

    controller coop can
      nonconsuming InviteVendor : (CoopCid, VendorInvitedId)
        with
          vendor : Party
        do
          withVendor <- create this with vendors = vendor :: vendors
          archive self
          invite <- create VendorInvite with ..
          return (withVendor, invite)
template VendorInvite
  with
    coop : Party
    vendor : Party
  where
    signatory coop

    controller vendor can
      AcceptInvitation : (ContractId Stall, StallPermitCid)
        do
          stall <- create Stall with owner = vendor, regulator = coop, buyers = [],offers = []
          stallPermit <- create StallPermit with ..
          return (stall, stallPermit)
template StallPermit
   with
     coop : Party
     vendor : Party
   where
     signatory vendor
     controller vendor can
        nonconsuming ForSale : (ContractId Stall,ContractId Offer)
          with
            stallCid : ContractId Stall
            inventoryCid : ContractId Inventory
          do
            inventory <- fetch inventoryCid
            stall <- fetch stallCid
            offer <- create Offer with inventory = inventoryCid, vendor
            stallWithOffer <- create stall with offers = offer :: stall.offers
            archive stallCid
            return (stallWithOffer, offer)
