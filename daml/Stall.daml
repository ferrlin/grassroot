{-# LANGUAGE ApplicativeDo #-}
module MarketStall where

import Inventory

type MarketStallCid = ContractId Stall
type InventoryId = ContractId Inventory
type ProductId = ContractId Product

template Stall
  with
    owner    : Party
    buyer    : Party
    regulator: [Party]
  where
    signatory owner, buyer
    observer regulator

    controller owner can
      Accept : ()
        do return ()

      Decline : ()
        do return ()
    -- controller owner can
    --   Commit : InventoryId
    --     with
		-- 		  inventory : InventoryId
    --     do
    --       inventoryId <- fetch inventory
    --       exercise inventoryId Settle with buyer

template Purchase
  with
    buyer    : Party
    item     : InventoryId
    amount   : Decimal
    quantity : Decimal
    seller   : Party
  where
    signatory buyer

    controller buyer can
      Send : (MarketStallId, ProductId)
			  do


    -- controller seller can
      -- Accept : MarketStallCid
        -- with
          -- buyer : Party
        -- do
      --     let stallCid = create MarketStall with owner = seller, buyer
      --     exercise stallCid Commit with item
      --     return stallCid

      -- Decline : ()
        -- do return ()
