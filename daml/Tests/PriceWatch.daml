{-# LANGUAGE ApplicativeDo #-}

module Tests.PriceWatch where

import Daml.Script
import PriceWatch

pw_test = do
  ben <- allocateParty "Ben"
  alice <- allocateParty "Alice"
  mra <- allocateParty "MRA"

  let
    issuer = mra
    currency = "EUR"

  -- MRA propose another pricing scheme for another product
  proposalAliceCid <- submit mra do
    createAndExerciseCmd
      PriceWatch with
        issuer
        owner = issuer
        productSymbol = "TMT"
        basePrice = 0.45
        retailPrice = 1.20
        currency
        unit = "mg"
        locked = False
      Propose with
        newOwner = alice

  priceWatchAliceCid <- submit alice do exerciseCmd proposalAliceCid Accept

  retailPriceForApprovalCid <- submit alice do exerciseCmd priceWatchAliceCid SetRetailPrice with newPrice = 0.80

  pricingApprovedCid <- submit issuer do exerciseCmd retailPriceForApprovalCid Approved

  submitMustFail alice do exerciseCmd retailPriceForApprovalCid Approved

  submitMustFail alice do exerciseCmd pricingApprovedCid SetBasePrice with newBasePrice = 0.60

  submit mra do exerciseCmd pricingApprovedCid ToggleLockPricing

  submitMustFail alice do exerciseCmd priceWatchAliceCid ToggleLockPricing
