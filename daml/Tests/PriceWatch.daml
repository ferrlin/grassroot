{-# LANGUAGE ApplicativeDo #-}

module Tests.PriceWatch where

import Daml.Script
import PriceWatch

pw_test = do
  ben <- allocateParty "Ben"
  alice <- allocateParty "Alice"
  mra <- allocateParty "MRA"

  let
    issuer = mra
    currency = "USD"
    details01 = PriceDetail with
       productSymbol = "TOMATO"
       basePrice = 10.50
       retailPrice = 12.75
       currency
       unit = "pack"
       locked = False

  -- MRA propose another pricing scheme for another product
  proposalAliceCid <- submit mra do
    createAndExerciseCmd
      PriceWatch with
        issuer
        details = details01
      Propose with
        newOwner = alice

  pricingAliceCid <- submit alice do exerciseCmd proposalAliceCid Accept

  rpUpdateCid <- submit alice do exerciseCmd pricingAliceCid SetRetailPrice with newPrice = 0.80

  submit mra do exerciseCmd rpUpdateCid Approved

  -- pricingApprovedCid <- submit issuer do exerciseCmd retailPriceForApprovalCid Approved

  -- submitMustFail alice do exerciseCmd retailPriceForApprovalCid Approved

  -- submitMustFail alice do exerciseCmd pricingApprovedCid SetBasePrice with newBasePrice = 0.60

  -- submit mra do exerciseCmd pricingApprovedCid ToggleLockPricing

  -- submitMustFail alice do exerciseCmd pricingAliceCid ToggleLockPricing
