module PriceWatch where

type PriceWatchCid = ContractId PriceWatch
type PricingProposalCid = ContractId PricingProposal

template PriceWatch
  with
    issuer         : Party
    owner          : Party
    productSymbol  : Text
    basePrice      : Decimal
    retailPrice    : Decimal
    currency       : Text
    locked         : Bool

  where
    signatory owner, issuer

    let toggleLockPricing = create this with locked = not(this.locked)

    controller issuer can
      Propose : PricingProposalCid
        with
          newOwner : Party
        do create PricingProposal with pricing = this, newOwner

      SetBasePrice : PriceWatchCid
        with
          newBasePrice : Decimal
        do create this  with basePrice = newBasePrice

      ToggleLockPricing : PriceWatchCid
        do toggleLockPricing

    controller owner can
      SetRetailPrice : PriceWatchCid
        with
          newPrice : Decimal
        do
          assertMsg "Retail price is currently locked. You are not allowed to change its price" (this.locked /= True)
          create this with retailPrice = newPrice

template PricingProposal
  with
    pricing  : PriceWatch
    newOwner : Party
  where
    signatory pricing.issuer, pricing.owner

    controller newOwner can
      Accept : PriceWatchCid
        do create pricing with owner = newOwner

      Decline : ()
        do return ()
