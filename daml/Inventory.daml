module Inventory where

import PriceWatch
import Stall

type ProductId = ContractId Product
type StallCid = ContractId Stall
type InventoryCid = ContractId Inventory
type PriceWatchCid = ContractId PriceWatch

data ProductType = Crops | Livestock | Aquatic | Pending deriving (Eq, Show)

template Product
  with
    producer      : Party
    owner         : Party
    label         : Text
    quantity      : Decimal
    productSymbol : Text
    unit          : Text
    observers     : [Party]
  where
    signatory producer
    observer observers

    controller producer can
      AddInventory : InventoryCid with
          owner    : Party
          stall    : StallCid
          thisPricing : PriceWatchCid
        do
          thisProduct <- create this
          create Inventory with
            product = thisProduct
            productType = Pending
            pricing = thisPricing
            owner
            stall

      SetQuantity : ProductId
        with
           newQuantity : Decimal
        do create this with quantity = newQuantity

      Disclose : ProductId
        with users : [Party]
        do create this with observers = users

    controller owner can
      Transfer : ProductId
        with newOwner : Party
        do create this with owner = newOwner

template Inventory
  with
    owner         : Party
    stall         : StallCid
    product       : ProductId
    pricing       : PriceWatchCid
    productType   : ProductType
  where
    signatory owner
    observer stall

    ensure product.productSymbol == pricing.productSymbol

    controller owner can
      Set_Type : InventoryCid
        with usedType : ProductType
        do create this with productType = usedType

      Settle : ProductId
        with
          buyer : Party
          quantity: Decimal
        do
          productCid <- fetch product
          exercise product Transfer with newOwner = buyer
