module Inventory where

import PriceWatch

type ProductCid = ContractId Product
type StallCid = ContractId Stall
type InventoryCid = ContractId Inventory

data ProductType = Crops | Livestock | Aquatic | Pending deriving (Eq, Show)

template Product
  with
    producer      : Party
    owner         : Party
    label         : Text
    quantity      : Int
    productSymbol : Text
  where
    signatory producer

    controller owner can
      nonconsuming AddInventory : InventoryCid with
          receiver    : Party
          thisPricing : PriceWatchCid
        do
          productCid <- create this
          archive self
          create Inventory with
            product = productCid
            productType = Pending
            pricing = thisPricing
            owner = receiver
            observers = [receiver]
      SetQuantity : ProductCid
        with
           newQuantity : Int
        do create this with quantity = newQuantity

    controller owner can
      Transfer : ProductCid
        with newOwner : Party
        do create this with owner = newOwner

template Inventory
  with
    owner         : Party
    product       : ProductCid
    pricing       : PriceWatchCid
    productType   : ProductType
    observers     : [Party]
  where
    signatory owner
    observer observers

    -- ensure product.productSymbol ==  pricing.productSymbol

    controller owner can
      SetProductType : InventoryCid
        with producType : ProductType
        do create this with productType

      Disclose : InventoryCid
        with users : [Party]
        do create this with observers = users

type OfferId = ContractId Offer

template Stall
  with
    owner    : Party
    buyers   : [Party]
    offers   : [OfferId]
    regulator: Party
  where
    signatory owner
    observer buyers

    controller buyers can
      BuyItem : ()
        do return ()

template Offer
  with
    vendor      : Party
    inventory   : InventoryCid
  where
    signatory vendor

    controller vendor can
      Settle : ProductCid
        with
          buyer : Party
        do
          inventoryCid <- fetch inventory
          exercise inventoryCid.product Transfer with newOwner = buyer
